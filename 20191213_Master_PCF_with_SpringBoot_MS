Others:
	Warfare complete: https://steamcommunity.com/sharedfiles/filedetails/?id=1527621312
	Steel and thunder; steel and thunder unique unites
	German leader: https://steamcommunity.com/sharedfiles/filedetails/?id=1306876592
	Isabel primera: https://steamcommunity.com/sharedfiles/filedetails/?id=898098597
	
Cognizant laptop	
	.\GDCUser
	password !r@in321


Pivotal Cloud Foundry with Spring Boot MS

Section 2: Getting started with PCF
	Create a free account in PCF and start with it.
	Cloud foundry CLI -> install CLI (Use homebrew for mac)
	Import Java Spring boot into IDE
Section 3: Deploy SpringBoot Hello World Rest
	Setting up SpringBoot Hello World Rest API in local
	Setting up SpringBoot Hello World Rest API in PCF
		Using PCF CLI
			cf login to log into account -> cf login -a <API endpoint>
				API endpoint: https://api.run.pivotal.io
				Email and password
			cf target -> target info (org and space)
				to change -o new_org and -s new_space
			cf push -> push an app to PCF -> cf push <app-name> --random-route
				req: app name (for example: hello-world-rest-api)
				route maps an URI to application -> routes are globally unique
				use --random-route to change the route
				specify buildpack -> run with maven clean package (if there are errors) -> create the app jar and deploy it to PCF
					mvn clean package
						redeploy the app -> maybe with manifest file, things work better
					specify target file -p <target_file_location> -> no --random-route needed, already defined				
			cf logs application_name -> to check logs
	Exploring Cloud Foundry CLI
		cf apps
		cf routes -> way to access an application
		cf map-route <app_name> <domain> --hostname <host_name>
			add a new route to the same application
		cf spaces
		cf orgs
		cf start <app_name> and cf stop <app_name> -> start and stop the application
		cf restart <app-name>
	Create an Application Manifest file
		cf create-app-manifest <app_name> -> create manifest file for that application -> default name: manifest.yml
			path: <path to the deployable unit => the jar file>
	=============
	To deploy: build a Jar (mvn clean package); cf push
	=============
	UnderstandingPCF Concepts: Droplet and build packs
		cf push Stages:
			Upload package (JAR file + manifest)
			Staging -> creation of droplet => determine and run the buildpack to create droplet
				droplet: self-contained unit: code, configuration and runtime
				cf v3-droplets <app_name> -> to see all the droplet created until now.
			Deployment of droplet into a cell
				cell: similar to virtual server in the cloud
	Configure PCF Java Build Pack for SpringBoot Application
		Add
			buildpacks: 
			- <Buildpack> https://github.com/cloudfoundry/java-buildpack.git
			timeout: <time in seconds> safe if the application takes a little longer to start
			
Section 4: Deploy Java Spring Boot TODO web app War to PCF (H2)
	Credentials for the app: in28minutes / dummy
	H2 Database url: jdbc:h2:mem:testdb
	Deploy to cloud:
		Create the package -> War file
		Create a manifest file for the project -> cf create-app-manifest <app_name>
			Add or Update information on manifest -> name, path to target, routes, buildpacks
			
Section 5: Deploy Java Spring Boot TODO web app War to PCF (MySQL)
	Code Review
		Add H2 to execute test
		Use MySQL in production -> configure conection and ddl-auto=update to retain data
	Running MySQL as Docker Container on Local
		Launch MySQL Server Image https://hub.docker.com/_/mysql => how to use this image
			docker images => see docker images in local
			docker pull mysql:5.7
			docker run mysql:5.7 (version 5.7)
				Options needed to run this image:
					-e MYSQL_ROOT_PASSWORD=dummypassword -e MYSQL_DATABASE=todos -e MYSQL_USER=todos-user -e MYSQL_PASSWORD=dummy_todos
					-p 3306:3306 -> expose container port on local machine port (to access through MySQL client)
					-name mysql -> especify name for the container
			docker container list -> list of running containers
			docker container stop <container_id> -> stop the container
			docker container rm <container_id> -> remove the container			 
		Connection to MySQL server -> MySQL Shell
			mysqlsh
				\connect -> connect to DB user_name@server
				\sql -> use SQL syntax
				\use -> schema to use
	Connect SpringBoot App to MySQL on local
		Application on startup creates the "todo" database
	Exploring PWS UI and create a service for TODO DB on PCF
		Login into PCF dashboard
		Add service -> ClearDB MySQL Database
			Instance name -> todo-database
			cf services -> list all services
			Also can be done by command line.
	Connnect SpringBoot App with MySQL DB on PCF
		Add manifest.yml
			Rename and change route.
			Add services that the application need -> todo-database
		Create the jar (mvn clean package)
		Push to CF -> cf push
		Test the application
		cf env <app_name> -> get environment information for PCF
			Using env information, connect to cloud DB with MySQL Shell.
				Server, User, Password
	Understanding PCF Spring AutoConfiguration
		Spring AutoReconfiguration Tasks
			Add "cloud profile"
			Exposes CF properties to APP
			Rewrites bean defs to connect with services bound in App
				Spring cloud dependencies -> manual and customization configuration
					Look CloudFoundryDatabaseConfig.java file (from the project)
				Rebuild and redeploy to cloud this new configuration

Deploy Java Spring Boot React Full Stack App to PCF
	Exploring application -> BE
		Basic and JWT authentication
	Exploring application -> FE
		React app, need node & npm
		Code location: 04 folder, frontend
		install node with brew -> brew install node
	Deploying Java REST API BE to PCF
		Add manifest.yml to the project -> change app name and routes
		Build project -> mvn clean package
		Push to PCF -> cf push
			Previous: stop other applications -> cf apps; cf stop <app_name>
		Connect Local FE app to Cloud BE app
			Export API_URL with url to cloud BE app -> https://rest-api-full-stack-jam.cfapps.io
			============
			ERROR -> develop FE in Angular
				Angular CLI installed
			============
		Building FE App for PCF
			Create a manifest file
				Less mem
				Path to build folder
				change name and route
				buildpack: staticfile for html and javascript
			Create a combine manifest file for FE and BE
		Exploring PCF UI
			Springboot links -> only if you have actuator dependency in your pom.xml => Trace and threads links.
			
Getting started with CCS and CES MS on PCF
	Introduction
		Def of MS:
			Services exposed by Rest 
			Small well chosen deployable unit => well defined bounds
			Cloud enabled => easily deploy new instances
	MS - Challenges
		Problem 1 -> Bounded context => identify boundaries as evolutionary process
		Problem 2 -> Configure management => dif number of instance of each MS, load balance
		Problem 3 -> Dinamic scale up and scale down
		Problem 4 -> Visibility => identify where a bug is, trace use
		Problem 5 -> Pack of cards 
	MS - Advantages
		Adv 1 -> New technology and porcess adaptation
		Adv 2 -> Dynamic scaling => easy if they are cloud enable
		Adv 3 -> Faster release cycles
	CCS and CES overview
		CCS: Currency Conversion Service
		CES: Currency Exchange Service -> DB access
	Push CCS and CES to PCF
		build the product -> mvn clean package
		Create manifest files
			Update name, path to jar and routes
			Updatae memory settings -> mem to 512 and edd environment vars
	Run CCS and CES in PCF - Environment variables and instances
		CCS: update route to CES in CurrencyExchangeServiceProxy -> set environment variable CURRENCY_EXCHANGE_URI to ces route in manifest
			cf set-env <app> <variable> <value> => cf set-env currency-conversion-service CURRENCY_EXCHANGE_URI https://ces-jam.cfapps.io
			Use 'cf restage currency-conversion-service' to ensure your env variable changes take effect
		Check instance info
		Added actuator dependency in pom.xml
			configure management endpoints
			idetify instance that reponse the request
	Scaling CCS and CES MS on PCF
		Create multiple instances of MS it depends in the load they recive
		Increase number of CCS and CES instances and how they talk to each others
			cf scale <app-name> -i <number of instances> => for CES
			Follow behaviour with logs
				cf logs <app-name>
			Requests from CCS => several times to be attended by both different instances of CES
		Scale CCS
			cf scale <app_name> -i <number of instances>
			Requests from CCS to see that the response comes back for different instances
	Distributed tracing on PCF
		Metrics -> logs => diff applications id: apps and routers
			Can see all the logs associate a certain request
		Include Spring-cloud-sleuth
			Dependency in pom.xml
			distributed tracing easy
			
Using service Registry for SpringBoot MS on PCF
	Understanding the need for Service registry and Set up Eureka Server
		Access env variables for an application
			cf env <app_name>
		One MS wants to ask the location of another MS to call -> ask a naming server (EurekaNamingSever for example)
			CCS asks EurekaNS for the current instances of CES -> CES needs to be registered into EurekaNS
		Setting up EurekaNS locally
			Use the correspond service from PCF
		EurekaNS
			Dependency to Netflix Eureka
			Add @EnableEurekaServer to SpringBoot Application Class
			Define name and a default port -> not register for itself
	Register CES MS to Eureka Service in local
		Add dependency to Spring-cloud-services-starter-service-registry
		Add @EnableDiscoveryClient to SpringBoot Application Class
		Add to application.properties URL for EurekaNS -> where clients register to Eureka
	Register CCS MS with Eureka Service and connect CES
		Add dependency -> spring-cloud-services-starter-service-registry
		Add @EnableDiscoveryClient to SpringBoot Application Class
		Add to application.properties URL for EurekaNS 
		Connect CCS to CES through Naming service
			Update FeignClient -> remove URL to force to talk to naming service to retrieve service with provided app name
	Create Service Registry to PCF and deploy CCS and CES
		Creating Naming Service in Cloud
			Service Registry from Marketplace
				Trial free plan -> deleted after 7 days, needs to be started
				Add to space and bind to one of the apps (CES)
				Bind to CCS
					Add Services to manifest
						tag: services: - <Service_name>
					package and push CES and CCS with this modifications
				Unset environment variable CURRENCY_EXCHANGE_URI:
					cf unset-env <app_name> <var_name>
					Tip: use cf stage to ensure changes take effect => cf restage <app_name>
					
Exploring auto scaling on PCF
	Autoscaling MS on PCF
		Scale CCS and CES two to instances
		Autoscaling: add or remove app instance of an application based on the percentage of resource(s) used 
			Example: use over 70%, add instance; use less 50%, remove instance
		Add PCF App Autoscaler CLI Plugin to PCF CLI
			Download from: https://docs.run.pivotal.io/appsman-services/autoscaler/using-autoscaler-cli.html
			Install plugin
				cf install-pllugin <plugin-location>
			Enable Autoscaling
				cf enable-autoscaling <app_name>
			Use
				cf autoscaling-apps
			Using UI for manual autoscaling
				Configure instance limits, scaling rules,...
				cd autoscaling-events <app_name>
	Disable Auto scaling on PCF
		cf disable-autoscaling <app_name>
		
Using Route services with PCF and Spring boot
	Understanding Route sevice
		API gateways
			Authentication, authoriazation and security
			Rate limits
			Fault tolerance
			Service Aggregation
		In PCF -> routes => cf routes
		Create a Route-User application to intercept calls to other apps and map them to the specific route
			Log feature service
			X_CF_FORWARDED_URL_HEADER -> to foward the url to the service
		Push to pcf, after building the package
			rename route to sbrs-jam from spring-boot-route-service
		How this service can intercept routes
			create a user-provided service (CUPS)
				cf create-user-provided-service <app-name> -r https://<route_to_service>
	Binding route services
		show routes
			cd routes
		Bind routes in PCF (do for both service, ces and ccs)
			cf bind-route-service <domain_name> --hostname <host_destiny> <service_that_intercept>
		check log for serivce destiny and interceptor
			cf logs <service_destiny>
	Disable route services on PCF   
		Unbind routes in PCF
			cf unbind-route-service <domain_name> --hostname <host_destiny> <service_that_intercept>
	Quick review of PCF
		BOSH
			Open source tools chain
			Takes care of
				Deployment
				Lifecycle Management -> health monitoring, failure and recovery, software updates
				
Setting up Centralized configuration
	Understanding centralized configuration for MS
		Spring cloud config server locally -> will be replace by a cloud service in PCF
			Dependency added:
				spring-cloud-config-server
			Anotation added to Spring boot application class:
				@EnableConfigServer
			Appliation properties:
				server and name
				spring cloud server git uri and search paths (folder in the repo)
	Configure CCS to talk to SpringCloudConfigServer
		Add dependency to pom file
			Spring cloud services starter config client => client to talk to config server
		Create a new file: bootstrap.properties
			Location of the config server: spring.cloud.config.uri=http://localhost:8888
			TODO: Remove application.properties and move data to application.properties default in config server
		TASK: connect CES to config server -> DONE
	Create a Github for Spring Cloud Sonfig Server
		Repositorio Forked: https://github.com/OptimusJam/dev-config-server-test
			To clone: https://github.com/OptimusJam/dev-config-server-test.git
		Folder: environment
		Files in the repo: <application_name>-<profile>.properties
			Profile is optional
			If no profile is added -> it is default config
	Configure refresh Scope for SpringBoot Application
		In controller, add annotation: @RefreshScope
		Variables refreshed when Actuator is invoked
			POST <application_url>/<actuator_url>/refresh => actuator_url is defined in application.properties
	Create Cloud Config Service on PCF
		Build CCS -> mvn clean package
		On PCF UI
			Create config server from marketplace -> Config Server
			Using CLI
				cf create-service p-config-server trial config-server -c config-server.json
													<service>				<Plan> <server_name> <configuration_file>
					<configuration_file> is in 12-spring-cloud-config-server, change URI to my repository
					Execute in configuration file
				cf services -> check all the services
		Small changes in code
			CCS:
				update manifest.yml
					Add config-server to services list
		Communication between MS and PCF services authenticated by Oauth
			Check variables in cf env <app_name>
			
Setting up Circuit breaker with Hystrix
	Setting up Hystrix Circuit breaker on Local
		FW for fault tolerance and return default responses back
		Implementation
			Add pom dependency
				spring-cloud-services-starter-circuit-breaker (Hystrix)
			Enable circuit breaker in springboot application class
				@EnableCircuitBreaker
			Add default response back in controller per method
				Add @HystrixCommand to method (for example, GET) to configure a fallback method
				Fallback method should match method signature (dif name, same args, remove @PathVariables)
				Return a def. response in case of error
			TIP: in case devtools error, remove the dependency from pom.xml
	Create a circuit breaker service and deploy app on PCF
		Marketplace -> service => circuit breaker
			it's a Dashboard
			Service name -> hystrix-dashboard
			Not bind any application
		For applications, in manifest.yml
			Add new service in services
				- hystrix-dashboard
		Build MS and push to PCF
		Access to Hystrix dashboard
	Understand Hystrix Open and Close Circuit Features
		curl call to ccs
			Perform 200 calls on a short period -> watch -n <time> curl <url>
				n: period of time to send each request, in seconds, min value 0.1
			When Hystrix detect a lot of calls to a circuit broken (open), execute fallback method
				Configurable property (watch histryx documentation)
				Circuit close: circuit that works

Exploring More features on PCF
	Understand PCF Resilience and configure health checks for MS
		Add health check endpoint
			cf set-health-check currency-conversion-service thhp --endpoint /manage/health
	Direct communitacion between MS
		use network policies
	Blue Green Deployment on PCF (https://martinfowler.com/bliki/BlueGreenDeployment.html)
		Applications always available -> what happends during an update
		Blue version of the application V1 - Blue
			Version V2 - Green
		Not direct deploy -> new version of the application for Green
		Both versions in live and new version is test -> swith charge to new version
		Process:
			Build app and update manifest.yml
				change name and route to temp-route
			Push new app (Green version) to pcf
			Test Green version -> Success
			Map route
				cf map-route <Green_app> <Domain> --hostname <production_url>
			Unmap temp route
			Send all traffic to green app -> unmap route from blue app
				cf unmap-route <Blue-app> <Domain> --hostname <production_url>
			Stop Blue Application
	Deploy containers to PCF
		look docker course from in28minutes
			cf push <app_name> --docker <path_to_docker_image> --random-route
		Tip
			execute from a folder without a manifest.yml file
			check memory available -> reduce memory in manifest to 256M
		Check: https://github.com/in28minutes/docker
			